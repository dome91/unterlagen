package templates

import (
	"fmt"
	"strconv"
	"unterlagen/features/administration"
	"unterlagen/features/common"
)

templ Administration(notifications []Notification, currentTab string, settings administration.Settings, users []administration.User, taskTabProperties TaskTabProperties, runtimeInfo administration.RuntimeInfo) {
	@authenticatedLayout(notifications, PageAdmin) {
		<div class="max-w-4xl mx-auto">
			<h1 class="text-3xl font-bold mb-8">Administration</h1>
			<div role="tablist" class="tabs tabs-lifted">
				@GeneralSettingsTab(currentTab, settings)
				@UserTab(currentTab, users)
				@TaskTab(currentTab, taskTabProperties)
				@RuntimeTab(currentTab, runtimeInfo)
			</div>
		</div>
	}
}

templ GeneralSettingsTab(currentTab string, settings administration.Settings) {
	<a href="/admin?tab=general" role="tab" class={ "tab", templ.KV("tab-active", currentTab == "general" || currentTab == "") }>General Settings</a>
	<div role="tabpanel" class={ "tab-content bg-base-100 border-base-300 rounded-box p-6", templ.KV("hidden", currentTab != "general" && currentTab != "") }>
		<div class="space-y-6">
			<div>
				<h2 class="text-xl font-semibold mb-4">General Settings</h2>
				<p class="text-base-content/70 mb-6">Configure general application settings</p>
			</div>
			<div class="card bg-base-200 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Registration Settings</h3>
					<form action="/admin/settings" method="POST" class="space-y-4">
						<div class="form-control">
							<label class="label cursor-pointer justify-start gap-4">
								<input
									type="checkbox"
									name="registrationEnabled"
									value="true"
									class="toggle toggle-primary"
									if settings.RegistrationEnabled {
										checked
									}
								/>
								<div>
									<span class="label-text font-medium">Enable Registration</span>
									<div class="text-sm text-base-content/70">
										Control whether new users can register for accounts
									</div>
								</div>
							</label>
						</div>
						<div class="card-actions justify-end">
							<button type="submit" class="btn btn-primary">
								Save Settings
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
}

templ UserTab(currentTab string, users []administration.User) {
	<a href="/admin?tab=users" role="tab" class={ "tab", templ.KV("tab-active", currentTab == "users") }>User Management</a>
	<div role="tabpanel" class={ "tab-content bg-base-100 border-base-300 rounded-box p-6", templ.KV("hidden", currentTab != "users") }>
		<div class="space-y-6">
			<div>
				<h2 class="text-xl font-semibold mb-4">User Management</h2>
				<p class="text-base-content/70 mb-6">Manage user accounts and permissions</p>
			</div>
			<div class="card bg-base-200 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Existing Users</h3>
					<div class="overflow-x-auto">
						<table class="table table-zebra">
							<thead>
								<tr>
									<th>Username</th>
									<th>Role</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody>
								for _, user := range users {
									<tr>
										<td class="font-medium">{ user.Username }</td>
										<td>
											<div class="badge badge-outline">
												{ string(user.Role) }
											</div>
										</td>
										<td>
											<div class="flex gap-2">
												<button class="btn btn-sm btn-outline btn-primary">
													Edit
												</button>
												<button class="btn btn-sm btn-outline btn-error">
													Delete
												</button>
											</div>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
			<div class="card bg-base-200 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Create New User</h3>
					<form action="/admin/users" method="POST" class="space-y-4">
						<div class="form-control">
							<label class="label" for="username">
								<span class="label-text">Username</span>
							</label>
							<input
								type="text"
								id="username"
								name="username"
								required
								placeholder="Enter username"
								class="input input-bordered w-full"
							/>
						</div>
						<div class="form-control">
							<label class="label" for="password">
								<span class="label-text">Password</span>
							</label>
							<input
								type="password"
								id="password"
								name="password"
								required
								placeholder="Enter password"
								class="input input-bordered w-full"
							/>
						</div>
						<div class="card-actions justify-end">
							<button type="submit" class="btn btn-primary">
								Create User
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
}

type TaskTabProperties struct {
	Tasks             []common.Task
	CurrentPage       int
	TotalPages        int
	TotalTasks        int
	HasCompletedTasks bool
}

func (p TaskTabProperties) TasksFrom() string {
	return strconv.Itoa(((p.CurrentPage - 1) * 10) + 1)
}

func (p TaskTabProperties) TasksTo() string {
	return strconv.Itoa(((p.CurrentPage - 1) * 10) + len(p.Tasks))
}

templ TaskTab(currentTab string, properties TaskTabProperties) {
	{{
		totalTasks := properties.TotalTasks
		totalPages := properties.TotalPages
		currentPage := properties.CurrentPage
		hasCompletedTasks := properties.HasCompletedTasks
	}}
	<a href="/admin?tab=tasks" role="tab" class={ "tab", templ.KV("tab-active", currentTab == "tasks") }>Task Management</a>
	<div role="tabpanel" class={ "tab-content bg-base-100 border-base-300 rounded-box p-6", templ.KV("hidden", currentTab != "tasks") }>
		<div class="space-y-6">
			<div>
				<h2 class="text-xl font-semibold mb-4">Task Management</h2>
				<p class="text-base-content/70 mb-6">Monitor background processing tasks</p>
			</div>
			<div class="card bg-base-200 shadow">
				<div class="card-body">
					<div class="flex justify-between items-center mb-4">
						<h3 class="card-title text-lg">Task Queue</h3>
						<form action="/admin/tasks/clear-completed" method="POST" onsubmit="return confirm('Are you sure you want to delete all completed tasks? This action cannot be undone.')">
							<button type="submit" class="btn btn-sm btn-outline btn-error" disabled?={ !hasCompletedTasks }>
								Clear Completed Tasks
							</button>
						</form>
					</div>
					<div class="overflow-x-auto">
						<table class="table table-zebra">
							<thead>
								<tr>
									<th>ID</th>
									<th>Type</th>
									<th>Status</th>
									<th>Attempts</th>
									<th>Created</th>
									<th>Error</th>
								</tr>
							</thead>
							<tbody>
								for _, task := range properties.Tasks {
									<tr>
										<td class="font-mono text-sm">{ task.ID[:8] }...</td>
										<td>
											<div class="badge badge-outline">
												{ string(task.Type) }
											</div>
										</td>
										<td>
											<div class={ "badge", templ.KV("badge-success", task.Status == common.TaskStatusCompleted), templ.KV("badge-error", task.Status == common.TaskStatusFailed), templ.KV("badge-warning", task.Status == common.TaskStatusRunning), templ.KV("badge-info", task.Status == common.TaskStatusPending) }>
												{ string(task.Status) }
											</div>
										</td>
										<td>{ strconv.Itoa(task.Attempts) }/{ strconv.Itoa(task.MaxAttempts) }</td>
										<td class="text-sm">{ task.CreatedAt.Format("2006-01-02 15:04") }</td>
										<td class="text-sm text-error">
											if task.Error != "" {
												{ task.Error }
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
					<div class="mt-4 flex justify-between items-center">
						<div class="text-sm text-base-content/70">
							Showing { properties.TasksFrom() }-{ properties.TasksTo() } of { strconv.Itoa(totalTasks) } tasks
						</div>
						<div class="btn-group">
							if currentPage > 1 {
								<a href={ templ.URL("/admin?tab=tasks&page=" + strconv.Itoa(properties.CurrentPage-1+'0')) } class="btn btn-sm">«</a>
							}
							for i := 1; i <= totalPages; i++ {
								if i == currentPage {
									<a href={ templ.URL("/admin?tab=tasks&page=" + strconv.Itoa(i)) } class="btn btn-sm btn-active">{  strconv.Itoa(i) }</a>
								} else {
									<a href={ templ.URL("/admin?tab=tasks&page=" + strconv.Itoa(i)) } class="btn btn-sm">{  strconv.Itoa(i) }</a>
								}
							}
							if currentPage < totalPages {
								<a href={ templ.URL("/admin?tab=tasks&page=" + strconv.Itoa(currentPage+1)) } class="btn btn-sm">»</a>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ RuntimeTab(currentTab string, info administration.RuntimeInfo) {
	<a href="/admin?tab=runtime" role="tab" class={ "tab", templ.KV("tab-active", currentTab == "runtime") }>Runtime Info</a>
	<div role="tabpanel" class={ "tab-content bg-base-100 border-base-300 rounded-box p-6", templ.KV("hidden", currentTab != "runtime") }>
		<div class="space-y-6">
			<div>
				<h2 class="text-xl font-semibold mb-4">Runtime Information</h2>
				<p class="text-base-content/70 mb-6">Application runtime metrics and system information</p>
			</div>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div class="card bg-base-200 shadow">
					<div class="card-body">
						<h3 class="card-title text-lg">Application Info</h3>
						<div class="space-y-3">
							<div class="flex justify-between">
								<span class="text-base-content/70">Version:</span>
								<span class="font-medium">{ info.Version }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-base-content/70">Go Version:</span>
								<span class="font-medium">{ info.GoVersion }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-base-content/70">Platform:</span>
								<span class="font-medium">{ info.GOOS }/{ info.GOARCH }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-base-content/70">Uptime:</span>
								<span class="font-medium">{ info.UptimeFormatted }</span>
							</div>
						</div>
					</div>
				</div>
				<div class="card bg-base-200 shadow">
					<div class="card-body">
						<h3 class="card-title text-lg">System Resources</h3>
						<div class="space-y-3">
							<div class="flex justify-between">
								<span class="text-base-content/70">CPU Cores:</span>
								<span class="font-medium">{ strconv.Itoa(info.NumCPU) }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-base-content/70">Goroutines:</span>
								<span class="font-medium">{ strconv.Itoa(info.NumGoroutine) }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-base-content/70">Memory Allocated:</span>
								<span class="font-medium">{ fmt.Sprintf("%.1f MB", info.MemAllocMB) }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-base-content/70">Memory System:</span>
								<span class="font-medium">{ fmt.Sprintf("%.1f MB", info.MemSysMB) }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-base-content/70">GC Runs:</span>
								<span class="font-medium">{ strconv.FormatUint(uint64(info.NumGC), 10) }</span>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="card bg-base-200 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Actions</h3>
					<p class="text-base-content/70 mb-4">Trigger runtime operations</p>
					<div class="flex gap-3">
						<a href="/admin?tab=runtime" class="btn btn-outline btn-primary">
							Refresh Data
						</a>
						<form action="/admin/runtime/gc" method="POST" class="inline">
							<button type="submit" class="btn btn-outline btn-secondary">
								Force GC
							</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}
